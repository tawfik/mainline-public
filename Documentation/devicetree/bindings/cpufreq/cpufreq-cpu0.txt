Generic cpufreq driver

It is a generic cpufreq driver for frequency management.  It
supports both uniprocessor (UP) and symmetric multiprocessor (SMP)
systems which may or maynot share clock and voltage across all CPUs.

Both required and optional properties listed below must be defined
under node /cpus/cpu@x. Where x is the first cpu inside a cluster.

Required properties:
- None

Optional properties:
- operating-points: Refer to Documentation/devicetree/bindings/power/opp.txt for
  details. OPPs *must* be supplied either via DT, i.e. this property, or
  populated at runtime.
- clock-latency: Specify the possible maximum transition latency for clock,
  in unit of nanoseconds.
- voltage-tolerance: Specify the CPU voltage tolerance in percentage.
- #cooling-cells:
- cooling-min-level:
- cooling-max-level:
     Please refer to Documentation/devicetree/bindings/thermal/thermal.txt.
- clocks: If CPU clock is populated from DT, "clocks" property must be copied to
  every cpu node sharing clock with cpu@x. Generic cpufreq driver compares
  "clocks" to find siblings, i.e. to see which CPUs share clock/voltages. If
  only cpu@0 contains "clocks" property it is assumed that all CPUs share clock
  line.

Examples:

1. All CPUs share clock/voltages

cpus {
	#address-cells = <1>;
	#size-cells = <0>;

	cpu@0 {
		compatible = "arm,cortex-a9";
		reg = <0>;
		next-level-cache = <&L2>;
		operating-points = <
			/* kHz    uV */
			792000  1100000
			396000  950000
			198000  850000
		>;
		clocks = <&clock CLK_ARM_CLK>;
		clock-names = "cpu";
		clock-latency = <61036>; /* two CLK32 periods */
		#cooling-cells = <2>;
		cooling-min-level = <0>;
		cooling-max-level = <2>;
	};

	cpu@1 {
		compatible = "arm,cortex-a9";
		reg = <1>;
		next-level-cache = <&L2>;
		clocks = <&clock CLK_ARM_CLK>;
	};

	cpu@2 {
		compatible = "arm,cortex-a9";
		reg = <2>;
		next-level-cache = <&L2>;
		clocks = <&clock CLK_ARM_CLK>;
	};

	cpu@3 {
		compatible = "arm,cortex-a9";
		reg = <3>;
		next-level-cache = <&L2>;
		clocks = <&clock CLK_ARM_CLK>;
	};
};


2. All CPUs inside a cluster share clock/voltages, there are multiple clusters.

cpus {
	#address-cells = <1>;
	#size-cells = <0>;

	cpu@0 {
		compatible = "arm,cortex-a15";
		reg = <0>;
		next-level-cache = <&L2>;
		operating-points = <
			/* kHz    uV */
			792000  1100000
			396000  950000
			198000  850000
		>;
		clocks = <&clock CLK_ARM1_CLK>;
		clock-names = "cpu";
		clock-latency = <61036>; /* two CLK32 periods */
	};

	cpu@1 {
		compatible = "arm,cortex-a15";
		reg = <1>;
		next-level-cache = <&L2>;
		clocks = <&clock CLK_ARM1_CLK>;
	};

	cpu@100 {
		compatible = "arm,cortex-a7";
		reg = <100>;
		next-level-cache = <&L2>;
		operating-points = <
			/* kHz    uV */
			792000  950000
			396000  750000
			198000  450000
		>;
		clocks = <&clock CLK_ARM2_CLK>;
		clock-names = "cpu";
		clock-latency = <61036>; /* two CLK32 periods */
	};

	cpu@101 {
		compatible = "arm,cortex-a7";
		reg = <101>;
		next-level-cache = <&L2>;
		clocks = <&clock CLK_ARM2_CLK>;
	};
};
